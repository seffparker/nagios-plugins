#!/bin/bash

show_version(){
echo -e "
Nagios/Icinga script to check and report Disk I/O usage in kB/s
Author:  Seff Parker
Version: v1.1.1 20200929
"
}


PREV_DS_SAVE=check_iokbps.save
PREV_STATUS=check_iokbps.status
R_WARN=32768 # Default Read warning level
R_CRIT=65536 # Default Read critical level
W_WARN=16384 # Default Write warning level
W_CRIT=32768 # Default Write critical level

# Read custom options from arguments
while getopts ":r:R:w:W:V" opt; do
  case ${opt} in
    r )
	R_WARN=$OPTARG
	;;
    R )
	R_CRIT=$OPTARG
	;;
    w )
	W_WARN=$OPTARG
	;;
    W )
	W_CRIT=$OPTARG
	;;
    V )
	show_version
	exit 3
	;;
    * )
	echo "Usage: $0 [-r Read warning kB/s] [-R Read critical kB/s] [-w Write warning kB/s] [-W Write critical kB/s]"
	exit 3
      ;;
  esac
done
shift $((OPTIND -1))

PART=$(ls -l /dev/disk/by-uuid/* | awk -F "/" '!/\/loop/ && !/\/ram/ && !/\/sr/ && !/\/fd/ {printf $NF"|"}')
CURR_DS=$(cat /proc/diskstats 2> /dev/null | grep -wE "${PART}#" | sort -k 3)

if [[ $R_WARN -gt $R_CRIT ]] || [[ $W_WARN -gt $W_CRIT ]]
	then
	STATUS="UNKNOWN: Warning level should be lower than critical"
	EXIT=3
elif [ ! -f $PREV_DS_SAVE ]
	then
	STATUS="UNKNOWN: Polling started"
	EXIT=3
elif [ ! -s $PREV_DS_SAVE ]
	then
	STATUS="UNKNOWN: Cannot read disk stats from Kernel"
	EXIT=3
else
	PART=$(ls -l /dev/disk/by-uuid/* | awk -F "/" '!/\/loop/ && !/\/ram/ && !/\/sr/ && !/\/fd/ {printf $NF"|"}')
	CURR_DS=$(cat /proc/diskstats 2> /dev/null | grep -wE "${PART}#" | sort -k 3)
	PREV_DS=$(cat $PREV_DS_SAVE)
	CURR_LC=$(echo "$CURR_DS" | wc -l)
	CURR_CC=$(echo "$CURR_DS" | wc -c)
	PREV_LC=$(echo "$PREV_DS" | wc -l)
	PREV_CC=$(echo "$PREV_DS" | wc -c)
	CURR_TS=$(date +%s)
	PREV_TS=$(date -r $PREV_DS_SAVE +%s)
	let POLL_TIME="($CURR_TS - $PREV_TS)"

	if [[ $CURR_LC -ne $PREV_LC || $CURR_CC -lt $PREV_CC ]]
		then
		STATUS="UNKNOWN: Re-polling started"
		EXIT=3
	elif [[ $POLL_TIME -eq 0 ]]
		then
		STATUS="UNKNOWN: Re-polling needs at least 1 second interval"
		EXIT=3
	else

		DISKS=($(echo "$PREV_DS" | awk '{print $3}'))
		SEC_RD_BEGIN=($(echo "$PREV_DS" | awk '{print $6}'))
		SEC_RD_END=($(echo "$CURR_DS" | awk '{print $6}'))
		SEC_WR_BEGIN=($(echo "$PREV_DS" | awk '{print $10}'))
		SEC_WR_END=($(echo "$CURR_DS" | awk '{print $10}'))
		DISK_NOS=${#DISKS[*]}

		# Debug:
		# echo "Arguments: -r $R_WARN -d $R_CRIT -w $W_WARN -t $W_CRIT"
		# echo "Number of disks: $DISK_NOS"
		# echo "Disks: ${DISKS[*]}"
		# echo "Sector Read begin: ${SEC_RD_BEGIN[*]}"
		# echo "Sector Read end: ${SEC_RD_END[*]}"
		# echo "Sector Write begin: ${SEC_WR_BEGIN[*]}"
		# echo "Sector Write end: ${SEC_WR_END[*]}"

		for ((i=0; i<$DISK_NOS; i++))
		do
			let READ_KBPS[$i]=("${SEC_RD_END[$i]}" - "${SEC_RD_BEGIN[$i]}")/${POLL_TIME}/2
			let WRITE_KBPS[$i]=("${SEC_WR_END[$i]}" - "${SEC_WR_BEGIN[$i]}")/${POLL_TIME}/2
			SHOW_UTIL[$i]="${DISKS[$i]}: Read=${READ_KBPS[$i]}KB/s, Write=${WRITE_KBPS[$i]}KB/s, "
			PERF_DATA[$i]="'${DISKS[$i]}:read'=${READ_KBPS[$i]}KB;$R_WARN;$R_CRIT;; '${DISKS[$i]}:write'=${WRITE_KBPS[$i]}KB;$W_WARN;$W_CRIT;;"
			[ ${READ_KBPS[$i]} -ge $R_CRIT ] && CRIT_DEV+=("${DISKS[$i]}:read")
			[ ${WRITE_KBPS[$i]} -ge $W_CRIT ] && CRIT_DEV+=("${DISKS[$i]}:write")
			[ ${READ_KBPS[$i]} -ge $R_WARN ] && WARN_DEV+=("${DISKS[$i]}:read")
			[ ${WRITE_KBPS[$i]} -ge $W_WARN ] && WARN_DEV+=("${DISKS[$i]}:write")
		done
		STATS="${SHOW_UTIL[*]}| ${PERF_DATA[*]}"
		IFS=','
		if [[ "${CRIT_DEV[*]}" ]]
			then
			STATUS="CRITICAL: ${CRIT_DEV[*]} is very high! - "
			EXIT=2
		elif [[ "${WARN_DEV[*]}" ]]
			then
			STATUS="WARNING: ${WARN_DEV[*]} is high! - "
			EXIT=1
		else
			STATUS="OK: Disk Read/Write usage is normal! - "
			EXIT=0
		fi
	fi
fi

echo -n "$CURR_DS" > $PREV_DS_SAVE

if [[ $EXIT -eq 3 ]] && PREV_EXIT=$(cat $PREV_STATUS 2> /dev/null)
	then
	echo $EXIT > $PREV_STATUS
	EXIT=$PREV_EXIT
else
	echo $EXIT > $PREV_STATUS
fi

echo "${STATUS}${STATS}"
exit $EXIT
